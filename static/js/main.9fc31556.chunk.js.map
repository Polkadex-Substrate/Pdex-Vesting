{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","WebsocketProvider","App","state","loading","contractAddress","userTokens","vestedTokens","totalSupply","owner","image","componentDidMount","PolkaAddress","eth","getAccounts","accounts","net","getId","networkId","PolkaDexInstance","Contract","PolkaAbi","listenToTokenTransfer","setState","updateUserTokens","alert","error","buttonClick","methods","VestedTokens","call","from","ClaimAfterVesting","send","err","data","claimVestedTokens","ShowOwner","balanceOf","events","Transfer","to","on","this","className","src","type","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fc31556.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.WebsocketProvider(\r\n          \"wss://mainnet.infura.io/v3/a59abf3cfde147728b1f64b13aa7410e\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport PolkaDex from \"./contracts/PolkaDex.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport PolkaAbi from \"./Abi.json\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { loading: false, contractAddress: null, userTokens: 0, vestedTokens: 0, totalSupply: 0, owner: 0, image: '/polkadex-second-tranche/Logo.png' };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      \r\n      //Contract address\r\n      const PolkaAddress = \"0xF59ae934f6fe444afC309586cC60a84a0F89Aaea\"\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n      this.PolkaDexInstance = new this.web3.eth.Contract(\r\n        PolkaAbi,\r\n        PolkaAddress\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.listenToTokenTransfer()\r\n      this.setState({ loading: true, contractAddress: PolkaAddress }, this.updateUserTokens);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  buttonClick = async () => {\r\n    let VestedTokens = await this.PolkaDexInstance.methods.VestedTokens(this.accounts[0]).call({ from: this.accounts[0] })\r\n    let claimVestedTokens\r\n      claimVestedTokens = await this.PolkaDexInstance.methods.ClaimAfterVesting().send({ from: this.accounts[0] }, function (err, data) {\r\n        console.log(err, \"err\");\r\n        console.log(data, \"data\")\r\n      });\r\n    \r\n    console.log(claimVestedTokens, \"claimVestedTokens\");\r\n\r\n  }\r\n\r\n  updateUserTokens = async () => {\r\n    let owner = await this.PolkaDexInstance.methods.ShowOwner().call();\r\n    let totalSupply = await this.PolkaDexInstance.methods.totalSupply().call();\r\n    let userTokens = await this.PolkaDexInstance.methods.balanceOf(this.accounts[0]).call();\r\n    let vestedTokens = await this.PolkaDexInstance.methods.VestedTokens(this.accounts[0]).call()\r\n\r\n\r\n\r\n    this.setState({ userTokens: userTokens / 10 ** 18, vestedTokens: vestedTokens / 10 ** 18, totalSupply: totalSupply / 10 ** 18, owner: owner });\r\n  }\r\n\r\n  listenToTokenTransfer = () => {\r\n    this.PolkaDexInstance.events.Transfer({ to: this.accounts[0] }).on(\"data\", this.updateUserTokens)\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.loading) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"navBar\">\r\n          <img className=\"logo\" src={this.state.image}/>\r\n        </div>\r\n      <div className=\"cardContainer\">\r\n      <div className=\"card\">\r\n        <p>Contract Address: <b>{this.state.contractAddress}</b></p>\r\n        <p>Total Supply: <b>{this.state.totalSupply}</b></p>\r\n        <p>Vested Balance: <b>{(this.state.vestedTokens)}</b></p>\r\n        <p>Current Balance: <b>{(this.state.userTokens)}</b></p>\r\n        <button type=\"button\" onClick={this.buttonClick} className=\"vestedButton\">Claim Vested Tokens</button>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}